// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	users "github.com/avtara/travair-api/businesses/users"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *Repository) GetByEmail(ctx context.Context, email string) (*users.Domain, error) {
	ret := _m.Called(ctx, email)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) *users.Domain); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmailAndPassword provides a mock function with given fields: ctx, email
func (_m *Repository) GetByEmailAndPassword(ctx context.Context, email string) (*users.Domain, error) {
	ret := _m.Called(ctx, email)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) *users.Domain); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetByUserID(ctx context.Context, userID uuid.UUID) (*users.Domain, error) {
	ret := _m.Called(ctx, userID)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *users.Domain); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreNewUsers provides a mock function with given fields: ctx, data
func (_m *Repository) StoreNewUsers(ctx context.Context, data *users.Domain) (*users.Domain, error) {
	ret := _m.Called(ctx, data)

	var r0 *users.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *users.Domain) *users.Domain); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *users.Domain) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, userID
func (_m *Repository) UpdateStatus(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

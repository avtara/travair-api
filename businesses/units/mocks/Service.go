// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	units "github.com/avtara/travair-api/businesses/units"

	uuid "github.com/google/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, data, userID
func (_m *Service) Add(ctx context.Context, data *units.Domain, userID uuid.UUID) (*units.Domain, error) {
	ret := _m.Called(ctx, data, userID)

	var r0 *units.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *units.Domain, uuid.UUID) *units.Domain); ok {
		r0 = rf(ctx, data, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*units.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *units.Domain, uuid.UUID) error); ok {
		r1 = rf(ctx, data, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPhoto provides a mock function with given fields: ctx, unitID, file
func (_m *Service) AddPhoto(ctx context.Context, unitID string, file *multipart.FileHeader) error {
	ret := _m.Called(ctx, unitID, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *multipart.FileHeader) error); ok {
		r0 = rf(ctx, unitID, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeThumbnail provides a mock function with given fields: ctx, unitID, file
func (_m *Service) ChangeThumbnail(ctx context.Context, unitID string, file *multipart.FileHeader) error {
	ret := _m.Called(ctx, unitID, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *multipart.FileHeader) error); ok {
		r0 = rf(ctx, unitID, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Detail provides a mock function with given fields: ctx, unitID
func (_m *Service) Detail(ctx context.Context, unitID string) (*units.Domain, error) {
	ret := _m.Called(ctx, unitID)

	var r0 *units.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) *units.Domain); ok {
		r0 = rf(ctx, unitID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*units.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, unitID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetID provides a mock function with given fields: ctx, unitID
func (_m *Service) GetID(ctx context.Context, unitID uuid.UUID) (uint, error) {
	ret := _m.Called(ctx, unitID)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) uint); ok {
		r0 = rf(ctx, unitID)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, unitID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnitsByGeo provides a mock function with given fields: ctx, ip, long, lat
func (_m *Service) UnitsByGeo(ctx context.Context, ip string, long string, lat string) ([]units.Result, error) {
	ret := _m.Called(ctx, ip, long, lat)

	var r0 []units.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []units.Result); ok {
		r0 = rf(ctx, ip, long, lat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]units.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, ip, long, lat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
